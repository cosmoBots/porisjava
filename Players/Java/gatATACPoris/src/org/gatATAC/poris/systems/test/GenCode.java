/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.gatATAC.poris.systems.test;


import org.gatATAC.poris.systems.Group;
import org.gatATAC.poris.systems.Mode;
import org.gatATAC.poris.systems.SubSystem;
import org.gatATAC.poris.systems.Value;
import org.gatATAC.poris.systems.ValueDoubleRange;
import org.gatATAC.poris.systems.ValueString;

/**
 *
 * @author osiris
 */
public class GenCode {

    public static SubSystem load() {


        //// Paste here
SubSystem s2 = new SubSystem("OsirisOPMS");
s2.setId(2);
SubSystem s3 = new SubSystem("DAS");
s3.setId(3);
SubSystem s4 = new SubSystem("expTime");
s4.setId(4);
ValueDoubleRange v5 = new ValueDoubleRange("expTimeRange",0.001,0.001,3600.0);
v5.setId(5);
s4.addValue(v5);
Mode m18= new Mode("expTime_Normal");
m18.setId(18);
m18.addValue(v5);
m18.setDefaultValue(v5);
s4.addMode(m18);
s4.setDefaultMode(m18);
s3.addSubSystem(s4);
SubSystem s6 = new SubSystem("Binning");
s6.setId(6);
Value v9 = new Value("1x1");
v9.setId(9);
s6.addValue(v9);
Value v10 = new Value("2x1");
v10.setId(10);
v10.setLabel("2x1 (horiz x vert)");
s6.addValue(v10);
Value v11 = new Value("1x2");
v11.setId(11);
v11.setLabel("1x2 (horiz x vert)");
s6.addValue(v11);
Value v12 = new Value("2x2");
v12.setId(12);
s6.addValue(v12);
Mode m19= new Mode("Binning_Normal");
m19.setId(19);
m19.addValue(v9);
m19.addValue(v11);
m19.addValue(v10);
m19.addValue(v12);
m19.setDefaultValue(v9);
s6.addMode(m19);
s6.setDefaultMode(m19);
Mode m73= new Mode("Binning_NoBinning");
m73.setId(73);
m73.addValue(v9);
m73.setDefaultValue(v9);
s6.addMode(m73);
Mode m168= new Mode("Binning_Rectangular");
m168.setId(168);
m168.addValue(v9);
m168.addValue(v12);
m168.setDefaultValue(v9);
s6.addMode(m168);
s3.addSubSystem(s6);
SubSystem s7 = new SubSystem("ReadOut");
s7.setId(7);
Value v85 = new Value("SLOW");
v85.setId(85);
v85.setLabel("SLOW (50KHz)");
s7.addValue(v85);
Value v86 = new Value("NORMAL");
v86.setId(86);
v86.setLabel("NORMAL (200KHz)");
s7.addValue(v86);
Value v87 = new Value("FAST");
v87.setId(87);
v87.setLabel("FAST (500KHz)");
s7.addValue(v87);
Mode m174= new Mode("ReadOut_Normal");
m174.setId(174);
m174.addValue(v86);
m174.addValue(v85);
m174.addValue(v87);
m174.setDefaultValue(v86);
s7.addMode(m174);
s7.setDefaultMode(m174);
s3.addSubSystem(s7);
SubSystem s8 = new SubSystem("ReadMode");
s8.setId(8);
Value v88 = new Value("CCD1+2-A");
v88.setId(88);
s8.addValue(v88);
Value v89 = new Value("CCD1+2-A+B");
v89.setId(89);
s8.addValue(v89);
Value v90 = new Value("CCD1-A");
v90.setId(90);
s8.addValue(v90);
Value v91 = new Value("CCD1-B");
v91.setId(91);
s8.addValue(v91);
Value v92 = new Value("CCD1-A+B");
v92.setId(92);
s8.addValue(v92);
Value v93 = new Value("CCD2-A");
v93.setId(93);
s8.addValue(v93);
Value v94 = new Value("CCD2-B");
v94.setId(94);
s8.addValue(v94);
Value v95 = new Value("CCD2-A+B");
v95.setId(95);
s8.addValue(v95);
Mode m175= new Mode("ReadMode_Normal");
m175.setId(175);
m175.addValue(v88);
m175.addValue(v89);
m175.addValue(v90);
m175.addValue(v92);
m175.addValue(v91);
m175.addValue(v93);
m175.addValue(v95);
m175.addValue(v94);
m175.setDefaultValue(v88);
s8.addMode(m175);
s8.setDefaultMode(m175);
s3.addSubSystem(s8);
Mode m16= new Mode("DAS_Normal");
m16.setId(16);
m16.setLabel("Normal");
m16.addSubMode(m19);
m16.addSubMode(m18);
m16.addSubMode(m174);
m16.addSubMode(m175);
m16.setDefaultSubMode(m19);
s3.addMode(m16);
s3.setDefaultMode(m16);
s2.addSubSystem(s3);
SubSystem s15 = new SubSystem("Filters");
s15.setId(15);
Group s182 = new Group("Filter");
s182.setId(182);
SubSystem s57 = new SubSystem("BroadFilter");
s57.setId(57);
Value v61 = new Value("Sloan_u'");
v61.setId(61);
s57.addValue(v61);
Value v62 = new Value("Sloan_g'");
v62.setId(62);
s57.addValue(v62);
Value v105 = new Value("Sloan_r'");
v105.setId(105);
s57.addValue(v105);
Value v106 = new Value("Sloan_i'");
v106.setId(106);
s57.addValue(v106);
Value v107 = new Value("Sloan_z'");
v107.setId(107);
s57.addValue(v107);
Mode m132= new Mode("BroadFilter_Normal");
m132.setId(132);
m132.addValue(v62);
m132.addValue(v106);
m132.addValue(v105);
m132.addValue(v61);
m132.addValue(v107);
m132.setDefaultValue(v62);
s57.addMode(m132);
s57.setDefaultMode(m132);
s182.addSubSystem(s57);
SubSystem s46 = new SubSystem("OSFilter");
s46.setId(46);
Value v47 = new Value("f643/27");
v47.setId(47);
s46.addValue(v47);
Value v48 = new Value("f648/28");
v48.setId(48);
s46.addValue(v48);
Value v108 = new Value("f657/35");
v108.setId(108);
s46.addValue(v108);
Value v109 = new Value("f680/43");
v109.setId(109);
s46.addValue(v109);
Value v110 = new Value("f694/44");
v110.setId(110);
s46.addValue(v110);
Value v111 = new Value("f709/45");
v111.setId(111);
s46.addValue(v111);
Value v112 = new Value("f723/45");
v112.setId(112);
s46.addValue(v112);
Value v113 = new Value("f738/46");
v113.setId(113);
s46.addValue(v113);
Value v114 = new Value("f754/50");
v114.setId(114);
s46.addValue(v114);
Value v115 = new Value("f770/50");
v115.setId(115);
s46.addValue(v115);
Value v116 = new Value("f785/48");
v116.setId(116);
s46.addValue(v116);
Value v117 = new Value("f802/51");
v117.setId(117);
s46.addValue(v117);
Value v118 = new Value("f819/52");
v118.setId(118);
s46.addValue(v118);
Value v119 = new Value("f838/58");
v119.setId(119);
s46.addValue(v119);
Value v120 = new Value("f858/58");
v120.setId(120);
s46.addValue(v120);
Value v121 = new Value("f878/59");
v121.setId(121);
s46.addValue(v121);
Value v122 = new Value("f893/50");
v122.setId(122);
s46.addValue(v122);
Value v123 = new Value("f902/40");
v123.setId(123);
s46.addValue(v123);
Value v124 = new Value("f910/40");
v124.setId(124);
s46.addValue(v124);
Value v125 = new Value("f919/41");
v125.setId(125);
s46.addValue(v125);
Value v126 = new Value("f923/34");
v126.setId(126);
s46.addValue(v126);
Value v127 = new Value("f927/34");
v127.setId(127);
s46.addValue(v127);
Value v128 = new Value("f932/34");
v128.setId(128);
s46.addValue(v128);
Value v129 = new Value("f936/35");
v129.setId(129);
s46.addValue(v129);
Value v130 = new Value("f940/35");
v130.setId(130);
s46.addValue(v130);
Mode m50= new Mode("OSFilter_Normal");
m50.setId(50);
m50.addValue(v47);
m50.setDefaultValue(v47);
m50.addValue(v48);
m50.addValue(v108);
m50.addValue(v109);
m50.addValue(v110);
m50.addValue(v111);
m50.addValue(v112);
m50.addValue(v113);
m50.addValue(v114);
m50.addValue(v115);
m50.addValue(v116);
m50.addValue(v117);
m50.addValue(v118);
m50.addValue(v119);
m50.addValue(v120);
m50.addValue(v121);
m50.addValue(v122);
m50.addValue(v123);
m50.addValue(v124);
m50.addValue(v125);
m50.addValue(v126);
m50.addValue(v127);
m50.addValue(v128);
m50.addValue(v129);
m50.addValue(v130);
s46.addMode(m50);
s46.setDefaultMode(m50);
s182.addSubSystem(s46);
SubSystem s58 = new SubSystem("UserFilter");
s58.setId(58);
ValueString v60 = new ValueString("UserFilterIdentifier","ID#0000");
v60.setId(60);
s58.addValue(v60);
Mode m63= new Mode("UserFilter_Normal");
m63.setId(63);
m63.addValue(v60);
m63.setDefaultValue(v60);
s58.addMode(m63);
s58.setDefaultMode(m63);
s182.addSubSystem(s58);
Mode m183= new Mode("FilterX_NoFilter");
m183.setId(183);
m183.setLabel("No Filter");
s182.addMode(m183);
Mode m184= new Mode("FilterX_Broad");
m184.setId(184);
m184.setLabel("Broad");
m184.addSubMode(m132);
m184.setDefaultSubMode(m132);
s182.addMode(m184);
Mode m185= new Mode("FilterX_OS");
m185.setId(185);
m185.setLabel("Order");
m185.addSubMode(m50);
m185.setDefaultSubMode(m50);
s182.addMode(m185);
Mode m186= new Mode("FilterX_User");
m186.setId(186);
m186.setLabel("User");
m186.addSubMode(m63);
m186.setDefaultSubMode(m63);
s182.addMode(m186);
s182.setDefaultMode(m183);
s15.addSubSystem(s182);
Mode m17= new Mode("Filters_Normal");
m17.setId(17);
m17.addSubMode(m184);
m17.addSubMode(m183);
m17.setDefaultSubMode(m183);
m17.addSubMode(m185);
m17.addSubMode(m186);
s15.addMode(m17);
s15.setDefaultMode(m17);
Mode m53= new Mode("Filters_TF");
m53.setId(53);
m53.addSubMode(m185);
m53.setDefaultSubMode(m185);
s15.addMode(m53);
s2.addSubSystem(s15);
SubSystem s28 = new SubSystem("Dispersion");
s28.setId(28);
SubSystem s29 = new SubSystem("Grism");
s29.setId(29);
Value v31 = new Value("R300B");
v31.setId(31);
s29.addValue(v31);
Value v32 = new Value("R300R");
v32.setId(32);
s29.addValue(v32);
Value v96 = new Value("R500B");
v96.setId(96);
s29.addValue(v96);
Value v97 = new Value("R500R");
v97.setId(97);
s29.addValue(v97);
Value v98 = new Value("R1000B");
v98.setId(98);
s29.addValue(v98);
Value v99 = new Value("R1000R");
v99.setId(99);
s29.addValue(v99);
Value v100 = new Value("R2000B");
v100.setId(100);
s29.addValue(v100);
Value v101 = new Value("R2500U");
v101.setId(101);
s29.addValue(v101);
Value v102 = new Value("R2500V");
v102.setId(102);
s29.addValue(v102);
Value v103 = new Value("R2500R");
v103.setId(103);
s29.addValue(v103);
Value v104 = new Value("R2500I");
v104.setId(104);
s29.addValue(v104);
Mode m33= new Mode("Grism_Normal");
m33.setId(33);
m33.addValue(v31);
m33.addValue(v32);
m33.addValue(v96);
m33.addValue(v97);
m33.addValue(v98);
m33.addValue(v99);
m33.addValue(v100);
m33.addValue(v101);
m33.addValue(v102);
m33.addValue(v103);
m33.addValue(v104);
m33.setDefaultValue(v31);
s29.addMode(m33);
s29.setDefaultMode(m33);
s28.addSubSystem(s29);
Mode m34= new Mode("Dispersion_Normal");
m34.setId(34);
m34.addSubMode(m33);
m34.setDefaultSubMode(m33);
s28.addMode(m34);
s28.setDefaultMode(m34);
s2.addSubSystem(s28);
SubSystem s39 = new SubSystem("TFSystem");
s39.setId(39);
SubSystem s222 = new SubSystem("Lambda");
s222.setId(222);
ValueDoubleRange v226 = new ValueDoubleRange("Lambda_BlueRange",1.5,1.0,2.0);
v226.setId(226);
s222.addValue(v226);
ValueDoubleRange v227 = new ValueDoubleRange("Lambda_RedRange",0.5,0.0,1.0);
v227.setId(227);
s222.addValue(v227);
Mode m229= new Mode("Lambda_BLUE");
m229.setId(229);
m229.addValue(v226);
m229.setDefaultValue(v226);
s222.addMode(m229);
Mode m230= new Mode("Lambda_RED");
m230.setId(230);
m230.addValue(v227);
m230.setDefaultValue(v227);
s222.addMode(m230);
s222.setDefaultMode(m229);
s39.addSubSystem(s222);
SubSystem s223 = new SubSystem("FWHM");
s223.setId(223);
ValueDoubleRange v224 = new ValueDoubleRange("FWHM_BlueRange",1.5,1.0,2.0);
v224.setId(224);
s223.addValue(v224);
ValueDoubleRange v225 = new ValueDoubleRange("FWHM_RedRange",0.5,0.0,1.0);
v225.setId(225);
s223.addValue(v225);
Mode m231= new Mode("FWHM_BLUE");
m231.setId(231);
m231.addValue(v224);
m231.setDefaultValue(v224);
s223.addMode(m231);
Mode m232= new Mode("FWHM_RED");
m232.setId(232);
m232.addValue(v225);
m232.setDefaultValue(v225);
s223.addMode(m232);
s223.setDefaultMode(m231);
s39.addSubSystem(s223);
Mode m52= new Mode("TF_RED");
m52.setId(52);
m52.addSubMode(m230);
m52.addSubMode(m232);
m52.setDefaultSubMode(m230);
s39.addMode(m52);
s39.setDefaultMode(m52);
Mode m228= new Mode("TF_BLUE");
m228.setId(228);
m228.addSubMode(m229);
m228.addSubMode(m231);
m228.setDefaultSubMode(m229);
s39.addMode(m228);
s2.addSubSystem(s39);
SubSystem s64 = new SubSystem("MaskLoader");
s64.setId(64);
Value v65 = new Value("LongSlit 0.4 arcsec");
v65.setId(65);
s64.addValue(v65);
Value v66 = new Value("LongSlit 0.6 arcsec");
v66.setId(66);
s64.addValue(v66);
ValueString v67 = new ValueString("MOSMaskIdentifier","ID#0000");
v67.setId(67);
s64.addValue(v67);
Value v70 = new Value("Half Field Mask");
v70.setId(70);
s64.addValue(v70);
Value v71 = new Value("NoMask");
v71.setId(71);
s64.addValue(v71);
Value v77 = new Value("LongSlit 0.8 arcsec");
v77.setId(77);
s64.addValue(v77);
Value v78 = new Value("LongSlit 1.0 arcsec");
v78.setId(78);
s64.addValue(v78);
Value v79 = new Value("LongSlit 1.2 arcsec");
v79.setId(79);
s64.addValue(v79);
Value v80 = new Value("LongSlit 1.5 arcsec");
v80.setId(80);
s64.addValue(v80);
Value v81 = new Value("LongSlit 1.8 arcsec");
v81.setId(81);
s64.addValue(v81);
Value v82 = new Value("LongSlit 2.0 arcsec");
v82.setId(82);
s64.addValue(v82);
Value v83 = new Value("LongSlit 2.5 arcsec");
v83.setId(83);
s64.addValue(v83);
Value v84 = new Value("LongSlit 5.0 arcsec");
v84.setId(84);
s64.addValue(v84);
Value v170 = new Value("FOV_1/3");
v170.setId(170);
s64.addValue(v170);
Mode m68= new Mode("MaskLoader_LS");
m68.setId(68);
m68.addValue(v65);
m68.addValue(v66);
m68.addValue(v77);
m68.addValue(v78);
m68.addValue(v79);
m68.addValue(v80);
m68.addValue(v81);
m68.addValue(v82);
m68.addValue(v83);
m68.addValue(v84);
m68.setDefaultValue(v65);
s64.addMode(m68);
s64.setDefaultMode(m68);
Mode m69= new Mode("MaskLoader_MOS");
m69.setId(69);
m69.addValue(v67);
m69.setDefaultValue(v67);
s64.addMode(m69);
Mode m72= new Mode("MaskLoader_TF");
m72.setId(72);
m72.addValue(v71);
m72.addValue(v70);
m72.addValue(v170);
m72.setDefaultValue(v71);
s64.addMode(m72);
s2.addSubSystem(s64);
Mode m14= new Mode("Osiris_SBBI");
m14.setId(14);
m14.setLabel("[SBBI] Broad Band Imaging");
m14.addSubMode(m16);
m14.addSubMode(m17);
m14.setDefaultSubMode(m16);
s2.addMode(m14);
Mode m37= new Mode("Osiris_SLSS");
m37.setId(37);
m37.setLabel("[SLSS] Long Slit Spectroscopy");
m37.addSubMode(m33);
m37.addSubMode(m17);
m37.addSubMode(m68);
m37.addSubMode(m16);
m37.setDefaultSubMode(m33);
s2.addMode(m37);
Mode m38= new Mode("Osiris_STFS");
m38.setId(38);
m38.setLabel("[STFS] Standard Tunable Filter Imaging");
m38.addSubMode(m52);
m38.addSubMode(m53);
m38.addSubMode(m72);
m38.addSubMode(m16);
m38.addSubMode(m228);
m38.setDefaultSubMode(m52);
s2.addMode(m38);
Mode m188= new Mode("Osiris_CBSB");
m188.setId(188);
m188.setLabel("[CBSB] All Modes Bias");
m188.addSubMode(m16);
m188.addSubMode(m17);
m188.setDefaultSubMode(m16);
s2.addMode(m188);
Mode m189= new Mode("Osiris_CFFD");
m189.setId(189);
m189.setLabel("[CFFD] Dome FlatFields");
m189.addSubMode(m16);
m189.addSubMode(m17);
m189.setDefaultSubMode(m16);
s2.addMode(m189);
s2.setDefaultMode(m189);
Mode m190= new Mode("Osiris_CFFS");
m190.setId(190);
m190.setLabel("[CFFS] Twilight FlatFields");
m190.addSubMode(m16);
m190.addSubMode(m17);
m190.setDefaultSubMode(m16);
s2.addMode(m190);
Mode m191= new Mode("Osiris_CTFD");
m191.setId(191);
m191.setLabel("[CTFD] TF Dome Flatfield");
m191.addSubMode(m53);
m191.addSubMode(m52);
m191.addSubMode(m72);
m191.addSubMode(m16);
m191.addSubMode(m228);
m191.setDefaultSubMode(m53);
s2.addMode(m191);
Mode m192= new Mode("Osiris_CTFS");
m192.setId(192);
m192.setLabel("[CTFS] TF Twilight Flatfield");
m192.addSubMode(m53);
m192.addSubMode(m72);
m192.addSubMode(m52);
m192.addSubMode(m16);
m192.addSubMode(m228);
m192.setDefaultSubMode(m53);
s2.addMode(m192);
Mode m193= new Mode("Osiris_CTFW");
m193.setId(193);
m193.setLabel("[CTFW] TF Wavelength Calibration on the Sky");
m193.addSubMode(m53);
m193.addSubMode(m72);
m193.addSubMode(m52);
m193.addSubMode(m16);
m193.addSubMode(m228);
m193.setDefaultSubMode(m53);
s2.addMode(m193);
Mode m194= new Mode("Osiris_CLSW");
m194.setId(194);
m194.setLabel("[CLSW] Longslit Wavelength Calibration");
m194.addSubMode(m17);
m194.addSubMode(m68);
m194.addSubMode(m34);
m194.addSubMode(m16);
m194.setDefaultSubMode(m17);
s2.addMode(m194);
Mode m195= new Mode("Osiris_CLSD");
m195.setId(195);
m195.setLabel("[CLSD] Longslit Dome Flatfield");
m195.addSubMode(m17);
m195.addSubMode(m68);
m195.addSubMode(m34);
m195.addSubMode(m16);
m195.setDefaultSubMode(m17);
s2.addMode(m195);
Mode m196= new Mode("Osiris_CLSS");
m196.setId(196);
m196.setLabel("[CLSS] Longslit Twilight Flatfield");
m196.addSubMode(m17);
m196.addSubMode(m68);
m196.addSubMode(m34);
m196.addSubMode(m16);
m196.setDefaultSubMode(m17);
s2.addMode(m196);
Mode m197= new Mode("Osiris_STFN");
m197.setId(197);
m197.setLabel("[STFN] N-Shuffle Tunable Filter Imaging");
m197.addSubMode(m53);
m197.addSubMode(m72);
m197.addSubMode(m52);
m197.addSubMode(m16);
m197.addSubMode(m228);
m197.setDefaultSubMode(m53);
s2.addMode(m197);
Mode m198= new Mode("Osiris_STSL");
m198.setId(198);
m198.setLabel("[STSL] Straddling Line Tunable Filter Imaging");
m198.addSubMode(m53);
m198.addSubMode(m68);
m198.addSubMode(m52);
m198.addSubMode(m16);
m198.addSubMode(m228);
m198.setDefaultSubMode(m53);
s2.addMode(m198);
Mode m199= new Mode("Osiris_SMOS");
m199.setId(199);
m199.setLabel("[SMOS] Standard Multiple Object Spectroscopy");
m199.addSubMode(m17);
m199.addSubMode(m69);
m199.addSubMode(m34);
m199.addSubMode(m16);
m199.setDefaultSubMode(m17);
s2.addMode(m199);
Mode m200= new Mode("Osiris_SMNS");
m200.setId(200);
m200.setLabel("[SMNS] Nod & Shuffle Multiple Object Spectroscopy");
m200.addSubMode(m17);
m200.addSubMode(m69);
m200.addSubMode(m34);
m200.addSubMode(m16);
m200.setDefaultSubMode(m17);
s2.addMode(m200);
Mode m201= new Mode("Osiris_SMSH");
m201.setId(201);
m201.setLabel("[SMSH] Micro-Shuffle Multiple Object Spectroscopy");
m201.addSubMode(m17);
m201.addSubMode(m69);
m201.addSubMode(m34);
m201.addSubMode(m16);
m201.setDefaultSubMode(m17);
s2.addMode(m201);
SubSystem s=s2;
        //// End Paste

        return s;
    }
}
